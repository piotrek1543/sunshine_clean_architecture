apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco-android'
apply from: "$project.rootDir/scripts/script-git-version.gradle"

Properties props = new Properties()
def keystoreProperties = file("keystore.properties")
if (keystoreProperties.exists()) {
    props.load(new FileInputStream(keystoreProperties))
}

static def changeApkFileName(variant, versionName, versionCode) {
    variant.outputs.all { output ->
        def flavor = ""
        if (variant.name.contains('production'))
            flavor = 'production'
        else if (variant.name.contains('staging'))
            flavor = 'staging'
        def newName = 'Orthyo_' + versionName + '_' +
                versionCode + '-' + flavor + "_" + variant.buildType.name + '.apk'

        outputFileName = newName
    }
}

android {
    lintOptions {
        abortOnError false
        warningsAsErrors true
    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode gitVersionCode
        versionName gitVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/app_developmentDebug.kotlin_module'
    }


    signingConfigs {
        release {
            /*  storeFile file("${props.getProperty('release.key.store', 'debug.keystore')}")
            storePassword "${props.getProperty('release.key.store.password', 'android')}"
            keyAlias "${props.getProperty('release.key.alias', 'androiddebugkey')}"
            keyPassword "${props.getProperty('release.key.alias.password', 'android')}"*/
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    flavorDimensions "default"

    productFlavors {
        staging {
            dimension "default"
            versionCode gitVersionCodeTime
            versionName gitVersionName
        }

        production {
            dimension "default"
            versionCode gitVersionCode
            versionName gitVersionName
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }
        qa {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree(dir: "proguard", include: ["*.pro"]).asList().toArray()
            signingConfig signingConfigs.release
            applicationIdSuffix ".qa"
            matchingFallbacks = ['release']
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree(dir: "proguard", include: ["*.pro"]).asList().toArray()
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        def versionName = variant.mergedFlavor.versionName
        def versionCode = variant.mergedFlavor.versionCode
        changeApkFileName(variant, versionName, versionCode)
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        test.resources.srcDirs += 'src/test/resources'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }
}

kapt {
    correctErrorTypes = true
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

dependencies {
    def mobileUiDependencies = rootProject.ext.mobileUiDependencies
    def mobileUiTestDependencies = rootProject.ext.mobileUiTestDependencies

    implementation project(':presentation')
    implementation project(':data')
    implementation project(':cache')
    implementation project(':remote')

    implementation mobileUiDependencies.javaxAnnotation
    implementation mobileUiDependencies.constraintLayout
    implementation mobileUiDependencies.preferenceSupport

    implementation mobileUiDependencies.kotlin
    implementation mobileUiDependencies.javaxInject
    implementation mobileUiDependencies.rxJava
    implementation mobileUiDependencies.androidAnnotations
    implementation mobileUiDependencies.supportDesign
    implementation mobileUiDependencies.timber
    implementation mobileUiDependencies.rxAndroid
    implementation mobileUiDependencies.glide
    implementation mobileUiDependencies.dagger
    implementation mobileUiDependencies.daggerSupport

    implementation presentationDependencies.archRuntime
    implementation presentationDependencies.archExtensions
    kapt presentationDependencies.archCompiler

    kapt mobileUiDependencies.daggerCompiler
    kapt mobileUiDependencies.daggerProcessor
    compileOnly mobileUiDependencies.glassfishAnnotation

    implementation mobileUiDependencies.leakCanary

    testImplementation mobileUiTestDependencies.kotlinJUnit

    // Instrumentation test dependencies
    androidTestImplementation mobileUiTestDependencies.junit
    androidTestImplementation mobileUiTestDependencies.mockito
    androidTestImplementation mobileUiTestDependencies.mockitoAndroid
    androidTestImplementation (mobileUiTestDependencies.espressoCore) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation (mobileUiTestDependencies.androidRunner) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation (mobileUiTestDependencies.androidRules) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation (mobileUiTestDependencies.espressoIntents) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation(mobileUiTestDependencies.espressoContrib) {
        exclude module: 'appcompat'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }

    kaptTest mobileUiDependencies.daggerCompiler
    kaptAndroidTest mobileUiDependencies.daggerCompiler
}
